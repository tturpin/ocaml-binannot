			OCamlwizard with Binannot

This directory contains an fork of Ocamlwizard, originally written by
David Baudet and Mohamed Iguernelala, which relies on OCaml-Binannot.




- OCamlwizard setup
~~~~~~~~~~~~~~~~~~~


The following assumes that you have root privileges. If not, you will
have to:
- change the install dir with by giving the configure script a
  --prefix option
- manually copy the file emacs/ocamlwizard.el into your ~/.emacs.d/
- add the following to your ~/.emacs:
    (add-to-list 'load-path "~/.emacs.d")
    <contents of emacs/52ocamlwizard.el>


Compilation and installation
............................


- Compile and install OCaml-Binannot

- In directory ocamlwizard (this directory):

  - autoconf
  - ./configure
  - make
  - sudo make install

- Optionnally, in directiory ocamlwizard/test:

  - make


Project configuration
.....................

OCamlwizard uses a very simple configuration file to know about a
projects directories and libraries. When it is invoked on a source
file <file.ml>, it looks for file .ocamlwizard in the directory
containing <file.ml>, or its parent directories, back to the root.
This file must contain exactly one directory name per line, and
compiled interface will be searched in this directories. Relative
directory names are interpreted with respect to the directory
containing the project file .ocamlwizard. See ../.ocamlwizard for an
example.




- Using OCamlwizard-Binannot inside emacs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Error recovery:
...............

OCamlwizard is able to ocercome localized errors in the edited file if
the relevant part is correct. This assumes the existence of a previous
version of the file named <file>.ml.last_compiled, which is correct
(the user should copy <file>.ml to <file>.ml.last_compiled after each
successful compilation).


Camlp4 -> Not supported
......    .............


Completion:
...........

Three completion actions are avaiable:

- Path completion (F12): complete a long identifier (value, record
  field, module name), interactively, given a (possibly empty) prefix.
  Empty prefixes are allowed in record (re-)definitions and record
  patterns, such as:
    - let r = {f1 = <expr> ; .	    (at least one field must be given)
    - let r = {<expr> with <maybe some fields> .
    - in a pattern: {f1 = <patt> .


- Pattern expansion (F11): expand a variable or wildcard inside a
  pattern, according to the inferred sub-pattern's type. The variable
  under the cursor is only expanded once, possibly introducing new
  wildcards, and the cursor is positioned on the first created
  wildcard, if any (allowing further expansion by typing F11 again).


- Match cases completion (F3): create a pattern-matching template
  after a match-with construct. This may be invoked just after:
    - match <expr> .
    - match <expr> with .
    - match <expr> with <match cases> .
  The result is very similar to pattern expansion, except that for a
  constructor type (most frequent case), constructors are put on
  successive lines.


Remark: Completion still needs to be improvemed in many respects. See
the test cases for a detailed overview of the current behavior.


Refactoring:
............

- Renaming (C-c C-o r): rename an identifier through an OCaml
  program. The cursor must be placed on an ident definition or
  reference (for example, a let binding or a pattern). Renaming takes
  care of necessary propagation (e.g., when distinct values with the
  same name need to be renamed consistently because this name appears
  in a common interface), and capture is detected. Undoing works in
  emacs only for the current buffer. Backups are made in case anything
  goes wrong.

  Renaming is implemented for: values, types, modules (non-recursive),
  module types, fields, constructors, and exceptions. Objects are not
  supported. Type variables, argument labels, and polymorphic variants
  are not supported either.

  The replacement is intended to be complete, up to the following known
  limitations:
  - labels, e.g. let x = .. in f ~x
  - fields, e.g. let x = .. in {x}	or match .. with {x} -> ..
  - or-patterns, e.g. match .. with [], x | x, [] -> ..
  - if an .ml file has no .mli, then renaming an element with the name of a
    previously bound element will cause a capture error.


Browsing:
.........

- Grep (C-c C-o g) display a clickable list (compile minor mode) of
  the connected definitions and occurrences of the ident under the
  cursor. Invocation is the same as for renaming.


- Command line interface
~~~~~~~~~~~~~~~~~~~~~~~~

The following conventions are common to all queries:
- stdin is ignored,
- stderr is used for debug purpose and should be discarded by editors.
- possible exit codes are:
  - 0: normal completion, with result is written on stdout
  - 1: "controlled" failure, with an explanation message on stdout
  - 2: unexpected error, with an exception backtrace printed on stdout.

Command line arguments needs to be redesigned.


- Internal working overview
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The OCamlwizard executable is called from an editor (for now, emacs)
to process queries such as completion, etc. It parses an types the
buffer up to the editing position, trivially cloing all the opened
syntactical constructs at the cut point. The answer is computed using
information from the resulting typedtree and the formatted result is
passed to the editor which performs minimal further treatment.


Details:
........

- The decision of what to perform (kind of completion, for example) is
  partly made during the parsing (in a rather intricate way).

- Communication with emacs: before calling OCamlwizard, the emacs code
  calls the do-auto-save function to write #file.ml# if needed.
  OCamlwizard checks if an auto-save exists. For positioning the
  cursor at the right place (first wildcard for example), OCamlwizard
  inserts a $ character before it, which is searched backward by
  emacs, then deleted.


- Source code organization
~~~~~~~~~~~~~~~~~~~~~~~~~~

	-> mostly irrational
